#+STARTUP: hisdestars overview

* Programming and Markup Languages
** JavaScript
*** Typescript ([[https://github.com/ananthakumaran/typescript.el][Github Repo]])
    typescript.el is major-mode for editing Typescript-files in GNU Emacs.

    typescript.el is a self-contained, lightweight and minimalist major-mode focused on providing basic font-lock/syntax-highlighting and indentation for Typescript syntax, without any external dependencies.

    Output from tsc and tslint is also handled seamlessly through compilation-mode.

    #+BEGIN_SRC emacs-lisp
      (use-package typescript-mode
        :ensure t)
    #+END_SRC

*** Tide ([[https://github.com/ananthakumaran/tide][Github Repo]])
    TypeScript Interactive Development Environment for Emacs

    #+BEGIN_SRC emacs-lisp
      (use-package tide
        :ensure t)
    #+END_SRC

*** ts-comint.el ([[https://github.com/josteink/ts-comint][Github Repo]])
    Run a TypeScript interpreter in an inferior process window

    This repo is directly forked from js-comint to support TypeScript instead.

    Prerequisites:
    ts-comint depends on the following components:
    - NodeJS
    - TypeScript REPL

    To use ts-comint these components must be installed on your system.

    To install these run the following commands, or whatever equivalents your system provides:
    - apt-get install node
    - npm install -g tsun

      #+BEGIN_SRC emacs-lisp
        (use-package ts-comint
          :ensure t)
      #+END_SRC

*** Tern
    [[http://ternjs.net/][Tern]] s a stand-alone code-analysis engine for JavaScript. It is intended to be used with a code editor plugin to enhance the editor's support for intelligent JavaScript editing. Features provided are:

   Autocompletion on variables and properties
   Function argument hints
   Querying the type of an expression
   Finding the definition of something
   Automatic refactoring

   $ sudo npm install -g tern

*** Company-tern
    [[https://github.com/proofit404/company-tern][Company-tern]] is Tern backend for company-mode.

    #+BEGIN_SRC emacs-lisp
      (use-package company-tern
        :ensure t
        :init
        ;(eval-after-load 'company '(add-to-list 'company-backends 'company-tern))
        (add-to-list 'company-backends 'company-tern)
        )
    #+END_SRC

*** Frontmacs-javascript.el ([[https://github.com/thefrontside/frontmacs/blob/master/frontmacs-javascript.el][Github Repo]])

    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t)
      (use-package js-doc
        :ensure t)
      (use-package rjsx-mode
        :ensure t)


      ;; js2-refactor requires:
      ;; js2-mode-20101228, s-1.9.0, multiple-cursors-1.0.0, dash-1.0.0, s-1.0.0, yasnippet-0.9.0.1
      (use-package js2-refactor
        :ensure t)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (require 'js2-mode)
      (require 'rjsx-mode)
      (require 'js2-refactor)
      (require 'js-doc)

      ;; use rjsx-mode for all JS files
      (add-to-list 'auto-mode-alist '("\\.js\\'"    . rjsx-mode))
      (add-to-list 'auto-mode-alist '("\\.mjs\\'"    . rjsx-mode))
      (add-to-list 'auto-mode-alist '("\\.pac\\'"   . rjsx-mode))
      (add-to-list 'interpreter-mode-alist '("node" . rjsx-mode))

      ;; We use js2r-refactor-mode which implies using js2-mode.
      ;; see https://github.com/magnars/js2-refactor.el
      ;;
      ;; all refactorings start with C-c C-r (for refactor!)
      (js2r-add-keybindings-with-prefix "C-c C-r")
      (add-hook 'js2-mode-hook 'js2-refactor-mode)

      ;; 2 space tab width
      (custom-set-variables '(js-indent-level 2)
                            '(js2-basic-offset 2))

      ;; setup jsdoc: https://github.com/mooz/js-doc
      ;;
      ;; We use the same prefix for js2r `C-c C-r' because it's an "advanced"
      ;; refactory-y type thing. The additional `i' prefix is for "insert"
      (define-key js2-refactor-mode-map (kbd "C-c C-r i d") #'js-doc-insert-function-doc)
      (define-key js2-refactor-mode-map "@" #'js-doc-insert-tag)

      ;; TypeScript:
      ;;
      ;; setup tide mode, the typescript IDE for Emacs
      ;; This is lifted straight from the suggested setup on the TIDE
      ;; README https://github.com/ananthakumaran/tide
      (defun fs/setup-tide-mode()
        (interactive)
        (tide-setup)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automatically '(save mode-enabled))
        (eldoc-mode +1)
        (tide-hl-identifier-mode +1)
        (company-mode +1))

      (add-hook 'typescript-mode-hook #'fs/setup-tide-mode)

      ;; setup formatting options. The full list can be found at
      ;; https://github.com/Microsoft/TypeScript/blob/87e9506/src/services/services.ts#L1244-L1272
      (setq tide-format-options
            '(:indentSize 2 :tabSize 2))


      ;;; parse node.js stack traces in compilation buffer.s
      (require 'compile)
      (add-to-list 'compilation-error-regexp-alist 'node)
      (add-to-list 'compilation-error-regexp-alist-alist
                   '(node "^[[:blank:]]*at \\(.*(\\|\\)\\(.+?\\):\\([[:digit:]]+\\):\\([[:digit:]]+\\)" 2 3 4))


      (provide 'frontmacs-javascript)
      ;;; frontmacs-javascript.el ends here
    #+END_SRC

    #+RESULTS:
    : frontmacs-javascript


*** Node.js
    [[https://github.com/abicky/nodejs-repl.el][nodejs-repl.el]] runs Node.js REPL (Read Eval Print Loop) in Emacs

    Description
    This program is derived from comint-mode and provides the following features:
    - token completion, same as Node.js REPL
    - file name completion in string
    - incremental history search
    - sending JavaScript codes to REPL

    BEGIN_SRC emacs-lisp
      (use-package nodejs-repl
        :ensure t
        :config
        (add-hook 'js-mode-hook
                  (lambda ()
                    (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-expression)
                    (define-key js-mode-map (kbd "C-c C-j") 'nodejs-repl-send-line)
                    (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
                    (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
                    (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)))
        )
    END_SRC

** Python
    [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs][Python Programming In Emacs]]
    _Linux:_
    Install autopep8, mypy-lang and pylint in Gentoo GNU/Linux using emerge command.

*** IDE
**** Elpy
     [[https://realpython.com/blog/python/emacs-the-best-python-editor/][Emacs – The Best Python Editor]]

     #+BEGIN_SRC emacs-lisp
       (use-package elpy
         :ensure t
         :init
         (elpy-enable)
         )
     #+END_SRC

*** Make C-c C-c behave like C-u C-c C-c in Python mode
    #+BEGIN_SRC emacs-lisp
      (require 'python)
      (define-key python-mode-map (kbd "C-c C-c")
        (lambda () (interactive) (python-shell-send-buffer t)))

      (defadvice py-execute-buffer (after advice-delete-output-window activate)
        (delete-windows-on "*Python Output*"))
    #+END_SRC

*** Syntax Checkers
**** Flychek
     #+BEGIN_SRC emacs-lisp
       ;; use flycheck not flymake with elpy
       (when (require 'flycheck nil t)
         (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
         (add-hook 'elpy-mode-hook 'flycheck-mode))
     #+END_SRC

**** Pylint

     [[https://pylint.org][pylint]]
     #+BEGIN_SRC emacs-lisp
       (use-package pylint
         :ensure t
         :init
         (autoload 'pylint "pylint")
       ;;  (add-hook 'python-mode-hook 'pylint-add-menu-items)
       ;;  (add-hook 'python-mode-hook 'pylint-add-key-bindings)
         (add-hook 'elpy-mode-hook 'pylint-add-menu-items)
         (add-hook 'elpy-mode-hook 'pylint-add-key-bindings)
         )
     #+END_SRC
**** checkers Multiple syntax checkers (inactive)
     [[https://github.com/msherry/flycheck-pycheckers][flycheck-pycheckers]] provides a way to run multiple syntax checkers on Python code, in parallel. The list of supported checkers includes:
    pylint ([[https://pylint.readthedocs.io/en/latest/technical_reference/features.html#pylint-checkers-options-and-switches][Pylint checkers’ options and switches]])
    flake8
    pep8
    pyflakes
    mypy (for both Python 2 and 3)

    This is an alternative way of running multiple Python syntax checkers in Flycheck that doesn't depend on Flycheck's chaining mechanism.

     BEGIN_SRC shell :exports none
       python -m install --user pyflackes
     END_SRC

     BEGIN_SRC emacs-lisp
       (use-package flycheck-pyflakes
         :ensure t)
     END_SRC

     BEGIN_SRC emacs-lisp
       (use-package flycheck-pycheckers
         :ensure t
         :init
         (with-eval-after-load 'flycheck
           (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup))
         )
     END_SRC

*** Company Files

    #+BEGIN_SRC emacs-lisp
      (load-file (concat user-emacs-directory "personal/post-config/company-files.el"))
    #+END_SRC

*** Import and Sorting
**** Importmagic

     [[https://github.com/anachronic/importmagic.el][importmagic.el]] is an Emacs package inspired on @alecthomas's importmagic library and PyCharm's ability to suggest imports for unresolved symbols.

     #+BEGIN_SRC emacs-lisp
       (use-package importmagic
         :ensure t
         :config
         (add-hook 'python-mode-hook 'importmagic-mode))
     #+END_SRC

**** Py-isort
     Provides commands, which use the external "isort" tool to tidy up the imports in the current buffer.

     #+BEGIN_SRC emacs-lisp
       (use-package py-isort
         :ensure t
         :init
         (add-hook 'before-save-hook 'py-isort-before-save)
         :config
         (setq py-isort-options '("--lines=50"))
         )
     #+END_SRC

*** Compliant formatting according to PEP8
    Most of the current formatters for Python --- e.g., autopep8, and pep8ify --- are made to remove lint errors from code. This has some obvious limitations. For instance, code that conforms to the PEP 8 guidelines may not be reformatted. But it doesn't mean that the code looks good.
**** Via py-autopep8
    Provides commands, which use the external autopep8 tool to tidy up the current buffer according to Python’s PEP8.

    #+BEGIN_SRC emacs-lisp
      (use-package py-autopep8
        :ensure t
        :init
        ;; enable autopep8 formatting on save
        ;; ignoring:
        ;; - E501 - Try to make lines fit within --max-line-length characters.
        ;; - W293 - Remove trailing whitespace on blank line.
        ;; - W391 - Remove trailing blank lines.
        ;; - W690 - Fix various deprecated code (via lib2to3).
        (setq py-autopep8-options '("--ignore=E501,W293,W391,W690"))
        (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
        )
    #+END_SRC
